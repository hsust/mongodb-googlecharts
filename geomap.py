# Process Ecomod Data
# D. Thiebaut
# See http://cs.smith.edu/dftwiki/index.php/Geo-Mapping_Data_using_Google_Charts#Python_to_the_Rescue.21 
# for more information.
# Written for Python 3.2.  If using Python 2.X, removing the parentheses from the print statements should be
# all there is to do to make the code work.
#

import codecs
import sys

# read the csv file into a string
csvAll = open( "total_ip_count_year.csv", "r").read( )


# Code taken from the Google chart page
# The html string contains the html code taken from Google's chart page
# https://developers.google.com/chart/interactive/docs/gallery/geomap
# Note the two %s entries.  The first one will be where we will insert
# the list of countries and associated counts.  The second %s is where
# we will insert a table listing all the countries.  This part is not
# on the original Google example, but added as a bonus.
# format for the first %s in html should be of the form:
#        ['Country',   'count'],
#        ['United States',   155],
#        ['Germany',     66], 
#        etc.

html="""
<html>
<head>
  <script type='text/javascript' src='https://www.google.com/jsapi'></script>
  <script type='text/javascript'>
   google.load('visualization', '1', {'packages': ['geochart']});
   google.setOnLoadCallback(drawMarkersMap);

    function drawMarkersMap() {
      var data = google.visualization.arrayToDataTable([
        %s  
      ]);

      var options = {displayMode: 'markers',
        colorAxis: {colors: ['green', 'blue']}};
      var chart = new google.visualization.GeoChart(document.getElementById('map_canvas'));
      chart.draw(data, options);
  };
  </script>
  <title>MongoDBU</title>
</head>

<body>
  <h1>MongoDB University Geolocation</h1>
  <div id='map_canvas' style='width: 900px; height: 500px;'></div>
  <br />
  %s  
</body>

</html>

"""

# The list of countries below was generated by running through
# the CSV file once and putting all the countries in a set, and
# then the set was put in a list, sorted and printed out.  The
# typos and mistakes were then fixed by hand, and the result pasted
# below.



# create data structures to hold the various entries
locations = []
countryCounts = {}
countries = set([])

# split the collection of CSV lines into single lines
# and each line into fields (called parts).
for line in csvAll.split( "\n" ):
    parts = line.split( "," )
    print("country: " + parts[0])
    print("population: " + parts[1])

    country = parts[0]
    freq = int(parts[1])

    # add country to set of countries (eliminates duplicates)
    countries.add( country )

    # count frequency of occurence for each country
    try:
        countryCounts[ country ] += freq
    except:
        countryCounts[ country ] = freq


# uncomment the code below to generate the list of unique
# countries (which is pasted in the varialbe COUNTRIES above.
"""
countries = list( countries )
countries.sort()
for country in countries:
    print( country )
    
for town, country in locations:
    print( town + ", " + country )
    
sys.exit( 0 )
"""


# now that the data structures are created, go through them and
# generate the strings needed in the HTML output.

# create the list of countries with their frequency next
list = []
for country in countryCounts.keys():
    count = countryCounts[ country ]
    list.append( (count, country ) )

list.sort()
list.reverse()

# put the list into a string
# at the same time create the html table
htmlString = "['Country', 'Population']"
tableString = ""

for count, country in list:
    #print( "%d, %s" % (count, country ) )
    htmlString += ",\n['%s', %d]" % ( country.replace("'",""), count )

# close the two strings
htmlString += "\n"

# save the resulting html to file.
#print( html %  (htmlString, tableString) )
open( "testGeodata.html", "w" ).write( html % ( htmlString, tableString ) )